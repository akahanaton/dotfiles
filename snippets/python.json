{
  "#!": {
    "prefix": "#!",
    "body": "#!/usr/bin/env python",
    "description": "Description"
  },
  "mainargs": {
    "prefix": "mainargs",
    "body": "def main(args):\n\tgffFile = open(args.gffFile,\"r\")\n\tline=gffFile.readline()\n\tprint(line)\n\tgffFile.close()\n\nif __name__ == '__main__':\nimport argparse\n\tparser = argparse.ArgumentParser(description='Count the number of coding base pairs in each gene.')\n\tparser.add_argument('gffFile', type=str, help='gmap gff3 file of reference position, -f gmap_match_cdna')\n\t# --------------------------------------------------\n\t# parser.add_argument('-c', dest='cleanCodon', type=str, default='Y', choices=['Y','N'], help='clean stop codon: Y/N')\n\t# parser.add_argument('-r', dest='cleanByRef', type=str, default=None, help='aligment format')\n\t# --------------------------------------------------\n\targs = parser.parse_args()\n\tmain(args)",
    "description": "to do"
  },
  "args": {
    "prefix": "args",
    "body": "import argparse\n\tparser = argparse.ArgumentParser(description='Count the number of coding base pairs in each gene.')\n\tparser.add_argument('gffFile', type=str, help='gmap gff3 file of reference position, -f gmap_match_cdna')\n\t# --------------------------------------------------\n\t# parser.add_argument('-c', dest='cleanCodon', type=str, default='Y', choices=['Y','N'], help='clean stop codon: Y/N')\n\t# parser.add_argument('-r', dest='cleanByRef', type=str, default=None, help='aligment format')\n\t# --------------------------------------------------\n\targs = parser.parse_args()",
    "description": "to do"
  },
  "readGff3": {
    "prefix": "readGff3",
    "body": "import GTF                      # https://gist.github.com/slowkow/8101481\n\tgc = GTF.dataframe(args.gffFile)",
    "description": "Description"
  },
  "readFastaList": {
    "prefix": "readFastaList",
    "body": "\tfrom Bio import SeqIO\n\trecords = list(SeqIO.parse(args.fastaFile, \"fasta\"))",
    "description": "biopython read fasta"
  },
  "readFastaDict": {
    "prefix": "readFastaDict",
    "body": "\tfrom Bio import SeqIO\n\tseqStr = dict()\n\twith log(\"Reading the fasta file: {}\".format(args.fastaFile)):\n\t\tseqHandle = open(args.fastaFile, \"r\")\n\t\tfor record in SeqIO.parse(seqHandle, \"fasta\"):\n\t\t\tseqStr[record.id] = record.seq",
    "description": "biopython read fasta"
  },
  "readFastaFull": {
    "prefix": "readFastaFull",
    "body": "\tfrom Bio import SeqIO\n\twith log(\"Reading the Fasta  file: {}\".format(args.fastaFile)):\n\t\trecords = list(SeqIO.parse(args.fastaFile, \"fasta\"))",
    "description": "biopython read fasta"
  },
  "defLog": {
    "prefix": "defLog",
    "body": "from contextlib import contextmanager\nimport sys\n@contextmanager\ndef log(message):\n\timport time\n\t\"\"\"Log a timestamp, a message, and the elapsed time to stderr.\"\"\"\n\tstart = time.time()\n\tsys.stderr.write(\"{} # {}\\n\".format(time.asctime(), message))\n\tyield\n\telapsed = int(time.time() - start + 0.5)\n\tsys.stderr.write(\"{} # done in {} s\\n\".format(time.asctime(), elapsed))\n\tsys.stderr.flush()",
    "description": "def function: log"
  },
  "readLine": {
    "prefix": "readLine",
    "body": "with open(${1:inFile}) as f:\n\tfor line in f:\n\t\tprint(line)\nf.close()",
    "description": "read line by line"
  },
  "writeFile": {
    "prefix": "writeFile",
    "body": "outHandle = open(${1:outFile},\"w+\")\noutHandle.write(\"This is line %d\\r\\n\" % (1))\noutHandle.close()",
    "description": "Description"
  },
  "writef": {
    "prefix": "writef",
    "body": "f.write(\"{0} {1} {2} {3}\".format(\n\tfilename.ljust(max_filename),\n\ttype.rjust(max_type),\n\tsize.rjust(max_size),\n\tmodified.rjust(max_modified)))",
    "description": "format write into fil"
  },
  "printf": {
    "prefix": "printf",
    "body": "print('{0} and {1}'.format('Geeks', 'Portal'))",
    "description": "eformat print"
  },
  "defErrPrint": {
    "prefix": "defErrPrint",
    "body": "def eprint(*args, **kwargs):\n\tprint(*args, file=sys.stderr, **kwargs)",
    "description": "print to stderr"
  },
  "defNestDict": {
    "prefix": "defNestDict",
    "body": "from collections import defaultdict\ndef nested_dict(n, type):\n\tif n == 1:\n\t\treturn defaultdict(type)\n\telse:\n\t\treturn defaultdict(lambda: nested_dict(n-1, type))",
    "description": "define nested dict"
  },
  "readCsvFull": {
    "prefix": "readCsvFull",
    "body": "import pandas as pd\nwig = pd.read_csv(args.shapeFile, names = [\"pos\",\"rt\"], sep= \" \", index_col=None)",
    "description": "pandas read csv"
  },
  "readCsv": {
    "prefix": "readCsv",
    "body": "wig = pd.read_csv(args.shapeFile, names = [\"pos\",\"rt\"], sep= \" \", index_col=None)",
    "description": "pandas read csv, no import library"
  },
  "writeCsv": {
    "prefix": "writeCsv",
    "body": "\twig.to_csv(args.outCsvFile, header=True, index=None, sep=' ', mode='a')",
    "description": "pandas write csv"
  },
  "try": {
    "prefix": "try",
    "body": "import logging\nlog = logging.getLogger(__name__)\ntry:\n\t${1:code here}\nexcept Exception as er:\n    log.exception(er)",
    "description": "try block"
  },
  "logInfoFull": {
    "prefix": "logInfoFull",
    "body": "import logging\nlog = logging.getLogger(__name__)\nlog.info(\"Info: %s\", ${1:info})",
    "description": "log.info full"
  },
  "logInfo": {
    "prefix": "logInfo",
    "body": "log.info(f\"${1:some info} {${2:var}}\")",
    "description": "log.info"
  },
  "fstring": {
    "prefix": "fstring",
    "body": "f\"some string: {${1:var}}\"",
    "description": "f string"
  }
}
